import pencil
import numpy
from matplotlib import pyplot
from matplotlib import gridspec
import sys
import os

base_path,script_name   = os.path.split(sys.argv[0])
scratch,simulation_name = os.path.split(base_path)
script_name             = script_name[:-3]

ivar = -1
pvar = "pvar.dat"
if len(sys.argv) > 1:
    ivar = int(sys.argv[1])
    pvar = "PVAR" + sys.argv[1]

parameters = pencil.read_param()
data       = pencil.read_var(ivar=ivar)
pdata      = pencil.read_pvar(varfile=pvar)

xp = pdata.xp
yp = pdata.yp
zp = pdata.zp

x0 = parameters.xyz0[0]
y0 = parameters.xyz0[1]
z0 = parameters.xyz0[2]
x1 = parameters.xyz1[0]
y1 = parameters.xyz1[1]
z1 = parameters.xyz1[2]

y_lower_frac = 1.0
y_upper_frac = 1.0
y_center     = 0.0
if len(sys.argv) == 4:
    y_lower_frac = float(sys.argv[2])
    y_upper_frac = float(sys.argv[3])
    if(y_lower_frac > 1.0 or y_lower_frac < 0.0 or y_upper_frac > 1.0 or y_upper_frac < 0.0):
        print("Slice size arguments are fractions of the length from the slice center")
        print("to the domain edge, and should be between 0.0 and 1.0.")
        sys.exit("Exiting...")
elif len(sys.argv) == 5:
    y_lower_frac = float(sys.argv[2])
    y_upper_frac = float(sys.argv[3])
    y_center     = float(sys.argv[4])
    if(y_lower_frac > 1.0 or y_lower_frac < 0.0 or y_upper_frac > 1.0 or y_upper_frac < 0.0):
        print("Slice size arguments are fractions of the length from the slice center")
        print("to the domain edge, and should be between 0.0 and 1.0.")
        sys.exit("Exiting...")
    if(y_center >= y1 or y_center <= y0):
        print("Slice is centered at or outside of the domain. Please pick a slice")
        print("center between " + str(y0) + " and " + str(y1) + ".")
        sys.exit("Exiting...")

fig, ((ax1),(ax2)) = pyplot.subplots(1,2,sharey=True)
fig.set_size_inches(5.4,10.8)
fig.set_dpi(100)
fig.subplots_adjust(wspace=0)
#fig.set_size_inches(19.2,10.8)
#fig.set_dpi(100)
#fig = pyplot.figure()
#grid_spec = gridspec.GridSpec(1,2,wspace=0.0)

yslice_lower = y_center - y_lower_frac*(y_center-y0)
yslice_upper = y_center + y_upper_frac*(y1-y_center)
yslice       = numpy.intersect1d(numpy.where(yp >= yslice_lower),numpy.where(yp <= yslice_upper))

markersize  = 20.0
markercolor = "green"
labelfontsize = 25
tickfontsize = 19

#ax1 = fig.add_subplot(grid_spec[0,0])

ax1.scatter(xp*1000.,zp*1000.,s=markersize,c=markercolor)
ax2.scatter(yp*1000.,zp*1000.,s=markersize,c=markercolor)

ax1.axis("equal")
ax2.axis("equal")

ax1.set_xlim([x0*1000.,x1*1000.])
ax2.set_xlim([y0*1000.,y1*1000.])

ax1.set_ylim([z0*1000.,z1*1000.])
#ax2.set_ylim([z0*1000.,z1*1000.])

ax1.set_xlabel(r"x(mm)",fontsize=labelfontsize)
ax1.set_ylabel(r"z(mm)",fontsize=labelfontsize)
ax2.set_xlabel(r"y(mm)",fontsize=labelfontsize)

for tick in ax1.xaxis.get_major_ticks():
    tick.label.set_fontsize(tickfontsize)
for tick in ax1.yaxis.get_major_ticks():
    tick.label.set_fontsize(tickfontsize)

#ax2.set_ylabel(r"z(mm)",fontsize=labelfontsize)

for tick in ax2.xaxis.get_major_ticks():
    tick.label.set_fontsize(tickfontsize)
#for tick in ax2.yaxis.get_major_ticks():
#    tick.label.set_fontsize(tickfontsize)

file_title = simulation_name + "_" + script_name + "_" + str(ivar) + ".png"
fig.savefig(file_title,bbox_inches="tight")

pyplot.show()
